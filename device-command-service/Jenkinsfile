node{
	//todo - Store port to Device type in map, after all bugs are fixed. 

	def stringParams=['appName','branch','remoteUser','remoteHost','logRoot','profile','loglevel','instanceID']
		def intParams=['port','sizeOfLogFiles','numberOfLogFiles']
		//These are parameters whose values are integers, not necessarily which are integer params in jenkins 

		def boolParams=['checkoutNeeded','copyToServer']

		def paramsMap=[:] 


		stage ('Parse Params')
		{
			echo this.params.toString()
				echo this.params.getClass().toString()


				//		this.params.each { key,val ->
				//			echo key+" "+val
				//		}

				stringParams.each {key->
					val=this.params.get(key)
						if (val==null)
							error('Got null value for '+key )
								paramsMap.put(key,val.trim())

				}

			intParams.each {key->
				val=this.params.get(key)
					if (val==null)
						error('Got null value for '+key )
					else if (!val.trim().isInteger())
					{
						error('Got non-integer value for '+key + ":"+val.trim() )   
					}
				paramsMap.put(key,val.trim())

			}

			boolParams.each {key->
				val=this.params.get(key)
					if (val==null)
						error('Got null value for '+key )
							paramsMap.put(key,val.toBoolean())
			}


			echo paramsMap.toString()

		}

	stage ('Checkout'){

		if(paramsMap.get("checkoutNeeded"))
		{

			checkout([$class: 'GitSCM',branches: [[name: paramsMap.get("branch") ]],userRemoteConfigs: [[credentialsId: 'deployjava', url: 'git@gitlab.com:axestrack_bankend/kafka_producer_microservice.git']]])


		}
	}

	stage ('Build'){
		    if(paramsMap.get("checkoutNeeded"))
                {

		echo "Building consumer..."
			sh "ls -la ${pwd()}"
			sh "ls -la ."
			sh "pwd"

			retVal=sh(returnStatus: true,script:"sh ./build.sh")
			echo "Build returned ${retVal.toString()}"
			if (retVal!=0)
				//		{
				//			error("Build failed with return value ${retVal.toString()}") 
				//		}	
				echo "Finished building...."

		}
	}
	stage('SSH transfer and restart') {
	     if(paramsMap.get('copyToServer'))
		{

		remoteUser=paramsMap.get('remoteUser')
			remoteHost=paramsMap.get('remoteHost')
			baseDir=paramsMap.get('appName');

		sshLsCommand="ssh -o StrictHostKeyChecking=no   ${remoteUser}@${remoteHost} ls -l ${baseDir}"

			echo sshLsCommand

			mkdirCommand="ssh -o StrictHostKeyChecking=no   ${remoteUser}@${remoteHost} mkdir -p ${baseDir}"
			echo mkdirCommand



			rsyncCommand="rsync -e \'ssh -o StrictHostKeyChecking=no\' --recursive --times --compress --delete --progress build/libs/ ${remoteUser}@${remoteHost}:${baseDir}"
			echo rsyncCommand

			sshRestartCommand="ssh -o StrictHostKeyChecking=no   ${remoteUser}@${remoteHost} sh ${baseDir}/production_restart.sh ${paramsMap.get('port')} ${paramsMap.get('profile')} ${paramsMap.get('sizeOfLogFiles')} ${paramsMap.get('numberOfLogFiles')} ${paramsMap.get('loglevel')} ${paramsMap.get('instanceID')} ${paramsMap.get('logRoot') }"
			echo sshRestartCommand


			try{
				sshagent(credentials : ['deployjava']) {
					//todo add checks for return values here
					//make directory if it doesnt exist
					sh mkdirCommand
						//This is a test command
						sh sshLsCommand
						//This is the actual copy command
						sh rsyncCommand

						sh sshRestartCommand

				}


			}
		}

		catch(err)
		{
			echo "This is a false alarm, because we're waiting 30 secs to see the logs... We're using this workaround until we figure out how to set timeout for "
				echo err.getMessage()
		}

            }


   

}

