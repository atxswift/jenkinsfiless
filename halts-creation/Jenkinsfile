node{

	def stringParams=['cloudConfigUri','appName','branch','remoteUser','remoteHost','logRoot','profile','logLevel','typeOfOperation']
		def intParams=['serverPort','instanceID','sizeOfLogFiles','numberOfLogFiles']
		//These are parameters whose values are integers, not necessarily which are integer params in jenkins 

		def boolParams=['checkoutNeeded','copyToServer']
		def opType=''
		def paramsMap=[:] 


		stage ('Parse Params')
		{
			echo this.params.toString()
				echo this.params.getClass().toString()

				stringParams.each {key->
					val=this.params.get(key)
						if (val==null)
							error('Got null value for '+key )
								paramsMap.put(key,val.trim())

				}

			intParams.each {key->
				val=this.params.get(key)
					if (val==null)
						error('Got null value for '+key )
					else if (!val.trim().isInteger())
					{
						error('Got non-integer value for '+key + ":"+val.trim() )   
					}
				paramsMap.put(key,val.trim())

			}

			boolParams.each {key->
				val=this.params.get(key)
					if (val==null)
						error('Got null value for '+key )
							paramsMap.put(key,val.toBoolean())
			}


			echo paramsMap.toString()

		}

	stage ('Checkout'){

		if(paramsMap.get("checkoutNeeded") && opType!='shutdown')
		{

			checkout([$class: 'GitSCM',branches: [[name: paramsMap.get("branch") ]],userRemoteConfigs: [[credentialsId: 'deployjava', url: 'git@gitlab.com:elogistjavaprojects/halts-creation.git']]])


		}
	}

	stage ('Build'){
		if(paramsMap.get('buildNeeded') && opType!='shutdown'){
			echo "Building consumer..."
				sh "ls -la ${pwd()}"
				sh "ls -la ."
				sh "pwd"

				retVal=sh(returnStatus: true,script:"sh ./build.sh")
				echo "Build returned ${retVal.toString()}"
				if (retVal!=0)
				{
					error("Build failed with return value ${retVal.toString()}") 
				}
		}	
		echo "Finished building...."

	}
	stage('SSH transfer and restart') {
		if(paramsMap.get('copyToServer'))
		{

			remoteUser=paramsMap.get('remoteUser')
				remoteHost=paramsMap.get('remoteHost')
				baseDir=paramsMap.get('appName')
				consumerNumber=paramsMap.get('instanceID');

			sshLsCommand="ssh -o StrictHostKeyChecking=no   ${remoteUser}@${remoteHost} ls -l ${baseDir}/${consumerNumber}"

				echo sshLsCommand

				mkdirCommand="ssh -o StrictHostKeyChecking=no   ${remoteUser}@${remoteHost} mkdir -p ${baseDir}/${consumerNumber}"
				echo mkdirCommand



				rsyncCommand="rsync -e \'ssh -o StrictHostKeyChecking=no\' --recursive --times --compress --delete --progress build/libs/ ${remoteUser}@${remoteHost}:${baseDir}/${consumerNumber}"
				echo rsyncCommand



				if(opType=='restart')
				{
					sshRunCommand="ssh -o StrictHostKeyChecking=no   ${remoteUser}@${remoteHost} sh ${baseDir}/${port}/production_restart.sh ${serverPort} ${paramsMap.get('profile')} ${paramsMap.get('sizeOfLogFiles')} ${paramsMap.get('numberOfLogFiles')}  ${paramsMap.get('logLevel')}  ${port}  ${logRoot} ${paramsMap.get('cloudConfigUri')}"
				}
				else if (opType=='start')
				{

					sshRunCommand="ssh -o StrictHostKeyChecking=no   ${remoteUser}@${remoteHost} sh ${baseDir}/${port}/production_start.sh ${serverPort} ${paramsMap.get('profile')} ${paramsMap.get('sizeOfLogFiles')} ${paramsMap.get('numberOfLogFiles')}  ${paramsMap.get('logLevel')}  ${port}  ${logRoot} ${paramsMap.get('cloudConfigUri')}"

				}
				else if(opType=='shutdown')
				{
					sshRunCommand="ssh -o StrictHostKeyChecking=no   ${remoteUser}@${remoteHost} sh ${baseDir}/${port}/production_shutdown.sh ${logRoot} ${port}"
				}
				else{
					error ('invalid typeOfOperation!')
				} 

			echo sshRunCommand


				sshagent(credentials : ['deployjava']) {	
					//todo add checks for return values here
					//make directory if it doesnt exist
					if(opType!='shutdown' && paramsMap.get('copyToServer'))
					{
						sh mkdirCommand
							//This is a test command
							sh sshLsCommand
							//This is the actual copy command
							sh rsyncCommand
					}
					//This command starts the server. 

					try{
						sh sshRunCommand
					}
					catch(err)
					{
						echo "This is a false alarm, because we're waiting 30 secs to see the logs... We're using this workaround until we figure out how to set timeout for "
							echo err.getMessage()
					}

				}
		
 
		}
		
	}
}

